import { createClient } from '@supabase/supabase-js'
import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'
import dotenv from 'dotenv'

// Carregar vari√°veis de ambiente
dotenv.config()

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente necess√°rias n√£o encontradas:')
  console.error('- VITE_SUPABASE_URL')
  console.error('- VITE_SUPABASE_ANON_KEY')
  console.error('\nVerifique se o arquivo .env est√° configurado corretamente.')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function runMigrations() {
  try {
    console.log('üöÄ Sistema de Migrations - Cl√≠nica de Est√©tica')
    console.log('=============================================')
    
    // Verificar conex√£o com Supabase
    console.log('üîç Verificando conex√£o com Supabase...')
    
    const { data, error } = await supabase.auth.getSession()
    
    if (error) {
      console.log('‚ö†Ô∏è  N√£o foi poss√≠vel verificar a sess√£o, mas isso √© normal para migrations')
    }
    
    // Ler o arquivo de migration
    const migrationsDir = path.join(__dirname, '..', 'migrations')
    const migrationFile = path.join(migrationsDir, '001_initial_schema.sql')
    
    if (!fs.existsSync(migrationFile)) {
      console.error('‚ùå Arquivo de migration n√£o encontrado:', migrationFile)
      process.exit(1)
    }
    
    const sql = fs.readFileSync(migrationFile, 'utf8')
    
    console.log('\nüìÑ Migration encontrada: 001_initial_schema.sql')
    console.log('üìä Tamanho do arquivo:', (sql.length / 1024).toFixed(2), 'KB')
    
    console.log('\n‚ö†Ô∏è  IMPORTANTE: Execu√ß√£o Manual Necess√°ria')
    console.log('==========================================\n')
    
    console.log('üîß Para executar esta migration, siga os passos:')
    console.log('\n1. Acesse: https://supabase.com/dashboard')
    console.log('2. Selecione seu projeto')
    console.log('3. V√° para "SQL Editor"')
    console.log('4. Copie o conte√∫do do arquivo:')
    console.log('   üìÅ', migrationFile)
    console.log('5. Cole no editor SQL e execute')
    
    console.log('\nüìã O que ser√° criado:')
    console.log('‚úÖ Tabela: procedures (procedimentos est√©ticos)')
    console.log('‚úÖ Tabela: patients (pacientes)')
    console.log('‚úÖ Tabela: appointments (agendamentos)')
    console.log('‚úÖ √çndices para performance')
    console.log('‚úÖ Triggers para updated_at')
    console.log('‚úÖ Row Level Security (RLS)')
    console.log('‚úÖ Pol√≠ticas de acesso por usu√°rio')
    
    console.log('\nüéØ Ap√≥s executar a migration:')
    console.log('1. Verifique se as tabelas foram criadas no "Table Editor"')
    console.log('2. Teste a aplica√ß√£o fazendo login')
    console.log('3. Tente criar um procedimento para validar')
    
    console.log('\nüí° Dica: Salve o conte√∫do da migration em um arquivo .sql')
    console.log('para facilitar a execu√ß√£o no Supabase Dashboard.')
    
    // Criar arquivo tempor√°rio para facilitar
    const tempFile = path.join(process.cwd(), 'temp_migration.sql')
    fs.writeFileSync(tempFile, sql)
    console.log('\nüìù Arquivo tempor√°rio criado:', tempFile)
    console.log('   Voc√™ pode copiar este arquivo e colar no Supabase Dashboard')
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message)
    console.error('\nüí° Verifique:')
    console.error('- Se as vari√°veis de ambiente est√£o corretas no .env')
    console.error('- Se o projeto Supabase est√° ativo')
    console.error('- Execute a migration manualmente no Supabase Dashboard')
  }
}

// Executar migrations
runMigrations()