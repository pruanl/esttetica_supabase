import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carregar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function testUsernameSearch() {
  try {
    console.log('üîç Testando busca por username...\n');

    // Primeiro, vamos listar alguns perfis com username para teste
    console.log('üìã 1. Listando perfis com username...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, clinic_name, username')
      .not('username', 'is', null)
      .limit(5);

    if (profilesError) {
      console.error('‚ùå Erro ao listar perfis:', profilesError);
      return;
    }

    if (!profiles || profiles.length === 0) {
      console.log('‚ö†Ô∏è  Nenhum perfil com username encontrado. Crie um username primeiro na aplica√ß√£o.');
      return;
    }

    console.log('‚úÖ Perfis com username encontrados:');
    profiles.forEach((profile, index) => {
      console.log(`   ${index + 1}. ${profile.clinic_name || 'Sem nome'} (@${profile.username})`);
    });

    // Testar fun√ß√£o por username
    console.log('\nüîç 2. Testando busca por username...');
    const testProfile = profiles[0];
    
    const { data: profileByUsername, error: byUsernameError } = await supabase
      .rpc('get_public_clinic_profile_by_username', {
        username_param: testProfile.username
      });

    if (byUsernameError) {
      console.error('‚ùå Erro na busca por username:', byUsernameError);
    } else {
      console.log('‚úÖ Busca por username bem-sucedida!');
      console.log('üìä Resultado:', JSON.stringify(profileByUsername, null, 2));
    }

    // Testar busca por username inexistente
    console.log('\nüîç 3. Testando busca por username inexistente...');
    
    const { data: notFound, error: notFoundError } = await supabase
      .rpc('get_public_clinic_profile_by_username', {
        username_param: 'username_inexistente_xyz123'
      });

    if (notFoundError) {
      console.error('‚ùå Erro inesperado:', notFoundError);
    } else {
      console.log('‚úÖ Teste de username inexistente funcionou!');
      console.log('üìä Resultado esperado (n√£o encontrado):', JSON.stringify(notFound, null, 2));
    }

    // Testar com diferentes formatos de username
    if (profiles.length > 0) {
      console.log('\nüîç 4. Testando busca com username em mai√∫scula...');
      const upperUsername = testProfile.username.toUpperCase();
      
      const { data: upperResult, error: upperError } = await supabase
        .rpc('get_public_clinic_profile_by_username', {
          username_param: upperUsername
        });

      if (upperError) {
        console.error('‚ùå Erro na busca por username mai√∫sculo:', upperError);
      } else {
        console.log('‚úÖ Busca por username mai√∫sculo funcionou!');
        console.log(`üìä Buscou por: ${upperUsername}, encontrou: ${upperResult?.profile?.username || 'nenhum'}`);
      }
    }

    console.log('\nüéâ Todos os testes de username conclu√≠dos!');
    console.log('\nüìù Como usar na sua aplica√ß√£o:');
    console.log('```javascript');
    console.log('import { ProfileService } from "./services/profileService";');
    console.log('');
    console.log('// Buscar perfil por username');
    console.log('const result = await ProfileService.getPublicProfileByUsername("username");');
    console.log('');
    console.log('if (result.success) {');
    console.log('  console.log("Perfil:", result.profile);');
    console.log('  console.log("Galeria:", result.gallery);');
    console.log('} else {');
    console.log('  console.log("Erro:", result.message);');
    console.log('}');
    console.log('```');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

// Executar testes
testUsernameSearch();